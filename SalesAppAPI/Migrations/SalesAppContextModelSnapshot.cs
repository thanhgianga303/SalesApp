// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesAppAPI.Data;

namespace SalesAppAPI.Migrations
{
    [DbContext(typeof(SalesAppContext))]
    partial class SalesAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("SalesAppAPI.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Catalog", b =>
                {
                    b.Property<string>("CatalogId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CatalogName")
                        .HasColumnType("TEXT");

                    b.HasKey("CatalogId");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Combo", b =>
                {
                    b.Property<string>("ComboId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ComboName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("TEXT");

                    b.HasKey("ComboId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("SalesAppAPI.Models.ComboDetails", b =>
                {
                    b.Property<int>("ComboDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComboId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("ComboDetailsId");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComboDetails");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isNew")
                        .HasColumnType("INTEGER");

                    b.HasKey("CustomerId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SalesAppAPI.Models.DeliveryNote", b =>
                {
                    b.Property<string>("DeliveryNoteId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ShipCost")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffId")
                        .HasColumnType("TEXT");

                    b.HasKey("DeliveryNoteId");

                    b.HasIndex("InvoiceId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("DeliveryNotes");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerID")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceName")
                        .HasColumnType("TEXT");

                    b.Property<string>("StaffID")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("SalesAppAPI.Models.InvoiceDetails", b =>
                {
                    b.Property<int>("InvoiceDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComboId")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceDetailsId");

                    b.HasIndex("ComboId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CatalogId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Details")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("CatalogId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Staff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("StaffId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Storage", b =>
                {
                    b.Property<string>("StorageId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExportDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("StorageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Account", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SalesAppAPI.Models.ComboDetails", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Combo", "Combo")
                        .WithMany("ComboDetailsList")
                        .HasForeignKey("ComboId");

                    b.HasOne("SalesAppAPI.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Customer", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("SalesAppAPI.Models.Customer", "AccountId");

                    b.HasOne("SalesAppAPI.Models.Role", null)
                        .WithMany("CustomerList")
                        .HasForeignKey("RoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SalesAppAPI.Models.DeliveryNote", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Invoice", "Invoice")
                        .WithOne("DeliveryNote")
                        .HasForeignKey("SalesAppAPI.Models.DeliveryNote", "InvoiceId");

                    b.HasOne("SalesAppAPI.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Invoice");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Invoice", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("SalesAppAPI.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SalesAppAPI.Models.InvoiceDetails", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Combo", "Combo")
                        .WithMany("InvoiceDetailsList")
                        .HasForeignKey("ComboId");

                    b.HasOne("SalesAppAPI.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetailsList")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("SalesAppAPI.Models.Product", "Product")
                        .WithMany("InvoiceDetailsList")
                        .HasForeignKey("ProductId");

                    b.Navigation("Combo");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Product", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Catalog", "Catalog")
                        .WithMany("ProductList")
                        .HasForeignKey("CatalogId");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Staff", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("SalesAppAPI.Models.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesAppAPI.Models.Role", null)
                        .WithMany("StaffList")
                        .HasForeignKey("RoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Storage", b =>
                {
                    b.HasOne("SalesAppAPI.Models.Product", "Product")
                        .WithMany("StorageList")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Account", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Catalog", b =>
                {
                    b.Navigation("ProductList");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Combo", b =>
                {
                    b.Navigation("ComboDetailsList");

                    b.Navigation("InvoiceDetailsList");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Invoice", b =>
                {
                    b.Navigation("DeliveryNote");

                    b.Navigation("InvoiceDetailsList");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Product", b =>
                {
                    b.Navigation("InvoiceDetailsList");

                    b.Navigation("StorageList");
                });

            modelBuilder.Entity("SalesAppAPI.Models.Role", b =>
                {
                    b.Navigation("CustomerList");

                    b.Navigation("StaffList");
                });
#pragma warning restore 612, 618
        }
    }
}
